name: Deploy to ECS with Fargate Capacity

on:
  push:
    branches:
      - master

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create .PEM File
        run: wget https://truststore.pki.rds.amazonaws.com/ap-southeast-1/ap-southeast-1-bundle.pem

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_AK_ID }}
          aws-secret-access-key: ${{ secrets.AWS_AK_SECRET }}
          aws-region: ap-southeast-1

      - name: Authenticate with AWS ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registry-type: private

      - name: Build, Tag, & Push Docker Image to ECR
        id: build-tag-push
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPO: paimon_bank_ilhamnyto
          TAG: ${{ github.sha }}
        run: |
          echo "container_url=$(echo $REGISTRY)/$(echo $REPO):$(echo $TAG)" >> $GITHUB_ENV
          docker build -t $REGISTRY/$REPO:$TAG .
          docker push $REGISTRY/$REPO:$TAG

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.22.x"

      - name: Build DB Connection String
        run: |
          echo "CONN_STRING=postgres://${{ secrets.DB_USER }}:${{ secrets.DB_PASS}}@${{ vars.DB_HOST }}:${{ vars.DB_PORT }}/${{ vars.DB_NAME }}?${{ vars.DB_PARAMS }}" >> $GITHUB_ENV
          echo $CONN_STRING

      - name: Migrate DB
        run: |
          go install -tags 'postgres' github.com/golang-migrate/migrate/v4/cmd/migrate@latest
          migrate -database $(echo $CONN_STRING) -path db/migrations up

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.7.5"

      - name: Setup AWS Credentials for TF Backend
        run: |
          echo "AWS_ACCESS_KEY_ID=${{ secrets.TF_BACKEND_AWS_AK_ID }}" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.TF_BACKEND_AWS_AK_SECRET }}" >> $GITHUB_ENV

      - name: Build Var File
        run: |
          cd infra
          touch var.tfvars
          echo "sg_id=\"${{ vars.SG_ID }}\"" >> var.tfvars
          echo "subnet_ids=${{ vars.SUBNET_IDS }}" >> var.tfvars
          echo "docker_image_url=\"$(echo $container_url)\"" >> var.tfvars
          echo "db_host=\"${{ vars.DB_HOST }}\"" >> var.tfvars
          echo "db_user=\"${{ secrets.DB_USER }}\"" >> var.tfvars
          echo "db_pass=\"${{ secrets.DB_PASS }}\"" >> var.tfvars
          echo "db_port=\"${{ vars.DB_PORT }}\"" >> var.tfvars
          echo "db_name=\"${{ vars.DB_NAME }}\"" >> var.tfvars
          echo "db_params=\"${{ vars.DB_PARAMS }}\"" >> var.tfvars
          echo "ecs_ak_id=\"${{ secrets.AWS_AK_ID }}\"" >> var.tfvars
          echo "ecs_ak_secret=\"${{ secrets.AWS_AK_SECRET }}\"" >> var.tfvars
          echo "ecs_exec_role_arn=\"${{ vars.ECS_EXEC_ROLE_ARN }}\"" >> var.tfvars
          echo "bcrypt_salt=\"${{ secrets.BCRYPT_SALT }}\"" >> var.tfvars
          echo "jwt_secret=\"${{ secrets.JWT_SECRET }}\"" >> var.tfvars
          echo "s3_id=\"${{ secrets.S3_ID }}\"" >> var.tfvars
          echo "s3_secret=\"${{ secrets.S3_SECRET }}\"" >> var.tfvars
          echo "s3_bucket=\"${{ vars.S3_BUCKET }}\"" >> var.tfvars

      - name: Run Terraform
        run: |
          cd infra
          terraform init
          terraform apply -var-file=var.tfvars --auto-approve
